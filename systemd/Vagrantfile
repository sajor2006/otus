# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :linux => {
        :box_name => "centos/7",
	:disks => {
		
		:sata2 => {
                        :dfile => './sata2.vdi',
                        :size => 2048, # Megabytes
						:port => 2
		}
	}
  },
}

Vagrant.configure("2") do |config| 

  MACHINES.each do |boxname, boxconfig| 

      config.vm.define boxname do |box| 

          box.vm.box = boxconfig[:box_name] 
          
          box.vm.provider :virtualbox do |vb| 
            	  vb.customize ["modifyvm", :id, "--memory", "1024"] 
                  needsController = false 
		  boxconfig[:disks].each do |dname, dconf| 
			  unless File.exist?(dconf[:dfile]) 
				vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true 
                          end
		  end
                  if needsController == true 
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
          end
 	  box.vm.provision "shell", inline: <<-SHELL 
cat > /etc/sysconfig/watchlog <<EOF
# Configuration file for my watchdog service
# Place it to /etc/sysconfig
# File and word in that file that we will be monit
WORD="ALERT"
LOG=/var/log/watchlog.log
EOF
cat > /opt/watchlog.sh <<EOF
#!/bin/bash
WORD=\\$1
LOG=\\$2
DATE=\\`date\\`
if grep \\$WORD \\$LOG &> /dev/null
then
logger "\\$DATE: I found word, Master!"
else
exit 0
fi
EOF
chmod +x /opt/watchlog.sh
cat > /usr/lib/systemd/system/watchlog.service <<EOF
[Unit]
Description=My watchlog service
[Service]
Type=oneshot
EnvironmentFile=/etc/sysconfig/watchlog
ExecStart=/opt/watchlog.sh \\$WORD \\$LOG
EOF
cat > /usr/lib/systemd/system/watchlog.timer <<EOF
[Unit]
Description=Run watchlog script every 30 second
[Timer]
# Run every 30 second
OnUnitActiveSec=30
Unit=watchlog.service
[Install]
WantedBy=multi-user.target
EOF
cat > /var/log/watchlog.log <<LOG
-------
sdgsdfpodg ALERT
908868t7yul'kln ALERT
gfdhgpgfokhpogf
vcbcbvvbALERT
sdgffdgALERTrgfdgfdg
--------
LOG
systemctl start watchlog.timer

yum install epel-release -y && yum install spawn-fcgi php php-cli mod_fcgid httpd -y

cat > /etc/sysconfig/spawn-fcgi <<CONF

SOCKET=/var/run/php-fcgi.sock
OPTIONS="-u apache -g apache -s $SOCKET -S -M 0600 -C 32 -F 1 -- /usr/bin/php-cgi"

CONF


### Так не срабатывает когда поднимается
##sed -i 's/etc\/sysconfig\/httpd/etc\/sysconfig\/httpd-%I/g' /usr/lib/systemd/system/httpd@.service
## Спешу сделал так

cat > /etc/systemd/system/spawn-fcgi.service <<SERVICE

[Unit]
Description=Spawn-fcgi startup service by Otus
After=network.target
[Service]
Type=simple
PIDFile=/var/run/spawn-fcgi.pid
EnvironmentFile=/etc/sysconfig/spawn-fcgi
ExecStart=/usr/bin/spawn-fcgi -n $OPTIONS
KillMode=process
[Install]
WantedBy=multi-user.target

SERVICE

rm -rf /usr/lib/systemd/system/httpd.service 
cat > /usr/lib/systemd/system/httpd@.service <<UNIT

[Unit]
Description=The Apache HTTP Server
After=network.target remote-fs.target nss-lookup.target
Documentation=man:httpd(8)
Documentation=man:apachectl(8)

[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/httpd-%I
ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND
ExecReload=/usr/sbin/httpd $OPTIONS -k graceful
ExecStop=/bin/kill -WINCH ${MAINPID}
# We want systemd to give httpd some time to finish gracefully, but still want
# it to kill httpd after TimeoutStopSec if something went wrong during the
# graceful stop. Normally, Systemd sends SIGTERM signal right after the
# ExecStop, which would kill httpd. We are sending useless SIGCONT here to give
# httpd time to finish.
KillSignal=SIGCONT
PrivateTmp=true

[Install]
WantedBy=multi-user.target
UNIT




echo 'OPTIONS=-f conf/first.conf' > /etc/sysconfig/httpd-first
echo 'OPTIONS=-f conf/second.conf' > /etc/sysconfig/httpd-second

cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/second.conf 
ln -s /etc/httpd/conf/httpd.conf /etc/httpd/conf/first.conf 

sed -i -e 's/Listen 80/Listen 8080/g'  -e '/least PidFile/a PidFile   \/var\/run\/httpd-second.pid' -e 's/#ServerName/ServerName/g' /etc/httpd/conf/second.conf
systemctl start httpd@second
systemctl start httpd@first
ss -tnulp | grep httpd

SHELL
      end
  end
end
